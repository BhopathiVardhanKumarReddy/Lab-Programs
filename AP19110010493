Write a C program to print preorder, inorder, and postorder traversal on Binary Tree. 

#include<stdio.h>
#include<stdlib.h>
struct node{
int data;
struct node* left;
struct node* right;
};
void inorder(struct node* root){
if(root==NULL)return;
inorder(root->left);
printf("%d->",root->data);
inorder(root->right);
}
void preorder(struct node* root){
if (root==NULL)return;
printf("%d->",root->data);
preorder(root->left);
preorder(root->right);
}
void postorder(struct node* root){
if (root==NULL)return;
postorder(root->left);
postorder(root->right);
printf("%d->",root->data);
}
struct node* createNode(int value){
struct node* newnode=malloc(sizeof(struct node));
newnode->data=value;
newnode->left=NULL;
newnode->right=NULL;
return newnode;
}
void main()
{
struct node*root=createNode(1);
root->left=createNode(12);
root->right=createNode(9);

root->left->left=createNode(10);
root->right->right=createNode(15);

printf("inorder traversal \t");
inorder(root);

printf("\npreorder traversal \t");
preorder(root);

printf("\npostorder traversal \t");
postorder(root);
}

Write a C program to create (or insert) and inorder traversal on Binary Search Tree.  


#include<stdio.h>
#include<stdlib.h>
struct node {
int data;
struct node* left;
struct node* right;
};
struct node *newNode(int item) {
struct node*temp = (struct node*)malloc(sizeof(struct node));
temp->data = item;
temp->left = temp->right = NULL;
return temp;
}
struct node* insert(struct node *node, int value){
if (node==NULL)return newNode(value);
if (value<node->data)
node->left = insert(node->left, value);
else if(value>node->data)
node->right = insert(node->right, value);
return node;
}
void inorder (struct node* root) {
if(root == NULL) return;
inorder(root->left);
printf("%d->", root->data);
inorder(root->right);
}
void main () {
struct node* root = NULL;
root = insert(root, 50);
insert(root, 30);
insert(root, 20);
insert(root, 40);
insert(root, 70);
insert(root, 80);
insert(root, 60);
printf("\n inorder traversal \n");
inorder(root);
}

Write a C program for linear search algorithm.


#include<stdio.h>
 int main () {
     int array[100], search, c, n;
     printf("enter the number of elements in array");
     scanf("%d", &n);
      printf(" enter %d integers \n",n);
       for (c=0; c<n; c++)
       scanf("%d",&array[c]);
       printf("enter a number to search \n");
       scanf("%d",&search);
       for (c=0; c<n; c++) {
           if (array[c] == search) {
               printf("%d is present at location %d.\n",search,c+1);
               break;
           }
       }
       if (c==n)
       printf("%d isn't not present in the array.\n",search);
       return 0;
 }


Write a C program for binary search algorithm


#include<stdio.h>
int main () {
    int c, first, last, middle, n, search, array[100];
    printf("enter the number of elements\n");
    scanf("%d", &n);
    
    printf("enter %d integers\n", n);
    
    for (c=0; c<n; c++)
    scanf("%d", &array[c]);
    
    printf("enter the value to find\n");
    scanf("%d",&search);
    
    first = 0;
    last = n-1;
    middle = (first+last)/2;
     while (first<= last) {
         if  (array[middle] < search)
         first = middle+1;
         else if (array[middle] == search) {
             printf("%d found at location %d.\n",search, middle+1);
             break;
         }
         else 
         last = middle-2;
         middle = (first+last)/2;
     }
         if (first>last)
         printf("not found! %d isn't present in the list.\n",search);
         return 0;
     }
